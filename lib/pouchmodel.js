// Generated by CoffeeScript 1.8.0
(function() {
  var Model, PouchdbBackedModel, async, fs, mkdirp, pathHelpers, pouch, pouchdbBinaryAdapter, pouchdbDataAdapter, pouchdbFileAdapter, pouchdbIndexAdapter, pouchdbRequestsAdapter, remove, uuid,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Model = require('./model');

  fs = require('fs');

  pathHelpers = require('path');

  async = require('async');

  mkdirp = require('mkdirp');

  remove = require('remove');

  uuid = require('node-uuid');

  pouch = require('pouchdb');

  pouchdbDataAdapter = {
    exists: function(id, callback) {
      return this.db.get(id, function(err, doc) {
        if (err && !err.status === 404) {
          return callback(err);
        } else if ((err != null ? err.status : void 0) === 404) {
          return callback(null, false);
        } else {
          return callback(null, true);
        }
      });
    },
    find: function(id, callback) {
      return this.db.get(id, (function(_this) {
        return function(err, doc) {
          if (err) {
            return callback(err);
          } else if (doc == null) {
            return callback(null, null);
          } else if (doc.docType.toLowerCase() !== _this.getDocType().toLowerCase()) {
            return callback(null, null);
          } else {
            return callback(null, new _this(doc));
          }
        };
      })(this));
    },
    create: function(attributes, callback) {
      var func;
      func = 'post';
      if ((attributes.id != null) || (attributes._id != null)) {
        if (attributes.id == null) {
          attributes.id = attributes._id;
        }
        if (attributes._id == null) {
          attributes._id = attributes.id;
        }
        func = 'put';
      } else {
        attributes._id = uuid.v4().split('-').join('');
      }
      return this.db[func](attributes, function(err, response) {
        if (err) {
          return callback(err);
        } else if (!response.ok) {
          return callback(new Error('An error occured while creating document.'));
        } else {
          return callback(null, response.id);
        }
      });
    },
    save: function(id, attributes, callback) {
      attributes.docType = this.getDocType();
      return this.db.get(attributes.id, (function(_this) {
        return function(err, doc) {
          if (err) {
            return callback(err);
          } else if (doc == null) {
            return callback(new Error('document does not exist'));
          } else if (doc.docType.toLowerCase() !== _this.getDocType().toLowerCase()) {
            return callback(new Error('document does not exist'));
          } else {
            attributes._id = attributes.id;
            attributes._rev = doc._rev;
            return _this.db.put(attributes, function(err, response) {
              if (err) {
                callback(err);
              }
              if (!response.ok) {
                return callback(new Error("An error occured while saving document.'"));
              } else {
                return callback();
              }
            });
          }
        };
      })(this));
    },
    updateAttributes: function(id, attributes, callback) {
      return this.save(id, attributes, callback);
    },
    destroy: function(id, callback) {
      return this.db.get(id, (function(_this) {
        return function(err, doc) {
          if (err) {
            return callback(err);
          } else {
            return _this.db.remove(doc, callback);
          }
        };
      })(this));
    }
  };

  pouchdbIndexAdapter = {
    search: function(query, callback) {
      return callback(null, []);
    },
    index: function(id, fields, callback) {
      return callback(null);
    }
  };

  pouchdbFileAdapter = {
    attach: function(id, path, data, callback) {
      var folder, _ref;
      if (typeof data === "function") {
        _ref = [null, data], data = _ref[0], callback = _ref[1];
      }
      folder = pathHelpers.join("attachments", this.getDocType().id);
      return mkdirp(folder, function(err) {
        var filename, filepath, source, target;
        if (err) {
          return callback(err);
        } else {
          filename = pathHelpers.basename(path);
          filepath = pathHelpers.join(folder, filename);
          source = fs.createReadStream(path);
          target = fs.createWriteStream(filepath);
          source.on('error', callback);
          source.on('end', callback);
          return source.pipe(target);
        }
      });
    },
    get: function(id, filename, callback) {
      var filepath, folder, source;
      folder = pathHelpers.join("attachments", this.getDocType().id);
      filename = pathHelpers.basename(filename);
      filepath = pathHelpers.join(folder, filename);
      source = fs.createReadStream(filepath);
      source.on('error', callback);
      source.on('end', callback);
      return source;
    },
    remove: function(id, filename, callback) {
      var filepath, folder;
      folder = pathHelpers.join("attachments", id);
      filepath = pathHelpers.join(folder, filename);
      return fs.unlink(filepath, callback);
    }
  };

  pouchdbBinaryAdapter = {
    attach: function(id, path, data, callback) {
      var folder, writeStream, _ref;
      if (typeof data === "function") {
        _ref = [null, data], data = _ref[0], callback = _ref[1];
      }
      writeStream = function(filepath, source, callback) {
        var target;
        target = fs.createWriteStream(filepath);
        source.on('error', callback);
        source.on('end', callback);
        return source.pipe(target);
      };
      folder = pathHelpers.join("attachments", id);
      return mkdirp(folder, function(err) {
        var buffer, filename, filepath, source;
        if (err) {
          return callback(err);
        } else if (typeof path === 'string') {
          filename = pathHelpers.basename(path);
          filepath = pathHelpers.join(folder, filename);
          source = fs.createReadStream(path);
          return writeStream(filepath, source, callback);
        } else if (path instanceof Buffer) {
          filename = (data != null ? data.name : void 0) || 'file';
          filepath = pathHelpers.join(folder, filename);
          buffer = path;
          return fs.writeFile(filepath, buffer, callback);
        } else {
          filename = (data != null ? data.name : void 0) || 'file';
          filepath = pathHelpers.join(folder, filename);
          source = path;
          return writeStream(filepath, source, callback);
        }
      });
    },
    get: function(id, filename, callback) {
      var filepath, folder, source;
      folder = pathHelpers.join("attachments", id);
      filename = pathHelpers.basename(filename);
      filepath = pathHelpers.join(folder, filename);
      source = fs.createReadStream(filepath);
      source.on('error', callback);
      source.on('end', callback);
      return source;
    },
    remove: function(id, filename, callback) {
      var filepath, folder;
      folder = pathHelpers.join("attachments", id);
      filepath = pathHelpers.join(folder, filename);
      return fs.unlink(filepath, callback);
    }
  };

  pouchdbRequestsAdapter = {
    define: function(name, request, callback) {
      var docType, map, qs, reduce, stringquery, view, viewName;
      docType = this.getDocType();
      map = request.map, reduce = request.reduce;
      qs = map.toString();
      qs = qs.substring('function(doc) {'.length);
      qs = qs.substring(0, qs.length - 1);
      stringquery = "if (doc.docType.toLowerCase() === " + ("\"" + docType + "\") " + (qs.toString()) + "};");
      stringquery = stringquery.replace('\n', '');

      /* jshint ignore: start */
      map = new Function("doc", stringquery);

      /* jshint ignore: end */
      view = {
        map: map.toString()
      };
      if (reduce != null) {
        view.reduce = reduce.toString();
      }
      viewName = "_design/" + (docType.toLowerCase());
      return this.db.get(viewName, (function(_this) {
        return function(err, designDoc) {
          if (designDoc == null) {
            designDoc = {
              _id: viewName,
              views: {}
            };
          }
          if (designDoc.views == null) {
            designDoc.views = {};
          }
          designDoc.views[name] = view;
          return _this.db.put(designDoc, function(err, designDoc) {
            return callback();
          });
        };
      })(this));
    },
    run: function(name, params, callback) {
      var docType, viewName, _ref;
      if (typeof params === "function") {
        _ref = [{}, params], params = _ref[0], callback = _ref[1];
      }
      docType = this.getDocType();
      viewName = "" + (docType.toLowerCase()) + "/" + name;
      return this.db.query(viewName, params, (function(_this) {
        return function(err, body) {
          var doc, results, _i, _len, _ref1;
          if (err) {
            return callback(err);
          } else {
            results = [];
            _ref1 = body.rows;
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              doc = _ref1[_i];
              doc.value.id = doc.value._id;
              results.push(new _this(doc.value));
            }
            return callback(null, results);
          }
        };
      })(this));
    },
    remove: function(name, callback) {
      var docType;
      docType = this.getDocType();
      name = '_design/' + docType.toLowerCase() + '/' + name;
      return this.db.get(name, function(err, doc) {
        if (err) {
          return callback(err);
        } else {
          return this.db.remove(doc, callback);
        }
      });
    },
    requestDestroy: function(name, params, callback) {
      var docType, _ref;
      if (typeof params === "function") {
        _ref = [{}, params], params = _ref[0], callback = _ref[1];
      }
      if (params.limit == null) {
        params.limit = 100;
      }
      docType = this.getDocType();
      return this.request(docType, name, params, function(err, docs) {
        if (err) {
          return callback(err);
        } else {
          return async.eachSeries(docs, function(doc, cb) {
            return doc.destroy(cb);
          }, function(err) {
            return callback(err);
          });
        }
      });
    }
  };

  module.exports = PouchdbBackedModel = (function(_super) {
    __extends(PouchdbBackedModel, _super);

    function PouchdbBackedModel() {
      return PouchdbBackedModel.__super__.constructor.apply(this, arguments);
    }

    PouchdbBackedModel.adapter = pouchdbDataAdapter;

    PouchdbBackedModel.indexAdapter = pouchdbIndexAdapter;

    PouchdbBackedModel.fileAdapter = pouchdbFileAdapter;

    PouchdbBackedModel.binaryAdapter = pouchdbBinaryAdapter;

    PouchdbBackedModel.requestsAdapter = pouchdbRequestsAdapter;

    PouchdbBackedModel.cast = function() {
      if (!this.__addedToSchema) {
        this.__addedToSchema = true;
        this.schema._id = String;
        this.schema._attachments = Object;
        this.schema._rev = String;
        this.schema.id = String;
        this.schema.docType = String;
        return this.schema.binaries = Object;
      }
    };

    return PouchdbBackedModel;

  })(Model);

}).call(this);
